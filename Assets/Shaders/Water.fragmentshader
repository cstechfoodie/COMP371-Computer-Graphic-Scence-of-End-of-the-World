#version 330 core


// Light and Material Uniform Variables
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent

uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: kC  y: kL  z: kQ


// Inputs
in vec3 v_color;         // vertex color: also diffuse color

in vec3 normal;          // Transformed normal in View Space
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
in vec4 lightVector;     // Vector from the vertex to the Light in View Space
// Length of lightVector is the distance between light and vertex
// if w = 1: Point light, if w = 0: directional light

// Ouput data
out vec3 color;


void main()
{
// Implment Phong Shading based on the parameters above
// Remember that directional light don't have attenuation

// ambient
vec3 ambient = materialCoefficients.x * lightColor;

// diffuse
vec3 lightdir = vec3(lightVector.x, lightVector.y, lightVector.z);
float diff = max(dot(normalize(normal), normalize(lightdir)), 0.0);
vec3 diffuse = materialCoefficients.y * diff * lightColor ;

// specular

vec3 viewDir = normalize(eyeVector);
vec3 reflectDir = reflect(normalize(-lightdir), normalize(normal));
float spec = pow(max(dot(viewDir, reflectDir), 0.0), materialCoefficients.w);
vec3 specular = materialCoefficients.z * spec * lightColor;


if (lightVector.w == 2.0) {
float kc = lightAttenuation.x;
float kl = lightAttenuation.y;
float kq = lightAttenuation.z;
float d = length(lightVector);
float att = 1.0 / (kc + kl * d + kq * d * d);
color = (((diffuse + specular) * att) + ambient)* v_color ;
} else {
color = (diffuse + ambient) * v_color + specular;
//color = (specular);
color= vec3(0.0f,0.0f,1.0f);
}

}
