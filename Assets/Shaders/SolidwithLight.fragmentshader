#version 330 core


// Ouput to fragment shader

out vec3 color;


in vec4 v_color;

in vec3 normal; // You will need this when you do per-fragment lighting


in vec4 lightVectors[5];
in vec3 eyeVector;

uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent
uniform vec3 lightColors[5];
uniform vec3 lightAttenuation; // x: kC  y: kL  z: kQ

void main()

{
	// set the fragment color to the interpolated vertex color
	vec3 result;
	for(int i=0;i<5;i++)
{
	vec3 ambient=lightColors[i]*materialCoefficients.x;

	vec3 norm=normalize(normal);
	vec3 lightDir=normalize(vec3(lightVectors[i]));
	float diff=max(dot(norm,lightDir),0.0);
	vec3 diffuse=lightColors[i]*diff*materialCoefficients.y;

	vec3 viewDir=normalize(eyeVector);
	vec3 reflectDir=reflect(-lightDir,norm);
	float spec=pow(max(dot(viewDir,reflectDir),0.0),materialCoefficients.w);
	vec3 specular=lightColors[i]*spec*materialCoefficients.z;

	
	float distance=length(vec3(lightVectors[i]));
	float attenuation=1.0/( lightAttenuation.x+ lightAttenuation.y*distance+ lightAttenuation.z*(distance*distance));

	//ambient  *= attenuation; 
	diffuse  *= attenuation;
	specular *= attenuation;
	

	result+=(ambient+diffuse+specular);
}

	color = result*vec3(1.0f);
}